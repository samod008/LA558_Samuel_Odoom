exclude = c(.east_south_central, "12"))  # 12 = FL
xplot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
#Add some data to the map
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
plot_usmap(regions = "counties") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
df <- data.frame(
state = c("AL", "Alaska", "AR", "AZ", "IA"),
values = c(14, 18, 19, 8, 23)
)
plot_usmap(data = df)
df <- data.frame(
state = c("AL", "Alaska", "AR", "AZ"),
values = c(14, 18, 19, 8)
)
plot_usmap(data = df)
df <- data.frame(
state = c("ND", "IA", "MN", "AL", "Alaska", "AR", "NC"),
values = c(10, 10, 15, 1, 1, 1)
)
df <- data.frame(
state = c("ND", "IA", "MN", "AL", "Alaska", "AR", "NC"),
values = c(10, 10, 15, 1, 1, 1, 1)
)
plot_usmap(data = df)
df <- data.frame(
state = c("ND", "IA", "MN", "AL", "Alaska", "AR", "NC"),
values = c(10, 10, 5, 1, 1, 1, 1)
)
plot_usmap(data = df)
plot_usmap(data = df) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.")
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = "I actually have visited more states than ths, but this /n will work for this exercuise..")
subtitle = "I actually have visited more states than ths, but this <br> will work for this exercuise..")
subtitle = "I actually have visited more states than ths, but this <br> will work for this exercuise..")
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = "I actually have visited more states than ths, but this <br> will work for this exercuise..")
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = "I actually have visited more states than ths, but this n/ will work for this exercuise..")
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than ths, but this n/ will work for this exercuise..", 60))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than ths, but
this will work for this exercuise. Notice that I am wrapping this text so it fits on multople line", 60))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than ths, but
this will work for this exercuise. Notice that I am wrapping this
text so it fits on multople lines if it exceeds 80 characters.", 80))
df <- data.frame(
state = c("ND", "IA", "MN", "AL", "Alaska", "AR", "NC"),
values = c(10, 10, 5, 1, 1, 1, 1)
)
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than ths, but
this will work for this exercuise. Notice that I am wrapping this
text so it fits on multople lines if it exceeds 80 characters.", 80))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multople lines if it exceeds 80 characters.", 80))
labs(title = str_wrap(my_title, 60))
plot_usmap(regions = "counties") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multople lines if it exceeds 80 characters.", 80))  +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multople lines if it exceeds 80 characters.", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"))
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white") +
theme(legend.position = "right"))
plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "right")
myMap <- plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "right")
myMap <- plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "right")
#display the plot
myMap
#display the plot
myMap
myMap + labs(title = "States Visitedd")
#after some consideration, I have decided to modify the tilte and I can do this
#my simply adjust the titel in myMap
myMap + labs(title = "States Visitedd")
#after some consideration, I have decided to modify the tilte and I can do this
#my simply adjust the titel in myMap
myMap + labs(title = "Some of the States I have Visited")
detach("package:usmap", unload = TRUE)
library(usmap)
library(usmapdata)
install.packages(c("usmap", "usmapdata", "ggplot2"))
install.packages(c("usmap", "usmapdata", "ggplot2"))
#after some consideration, I have decided to modify the title and I can do this
#by adding a + and the change of the title parameter. Here I adjust the title
myMap + labs(title = "Some of the States I have Visited")
#display the plot with the new title
myMap
install.packages("readxls")
library("readxl")
setwd("~/Library/CloudStorage/Box-Box/GitHub_Repos/LA558_2023/LA558_2023/lecture/5ab")
statePop <- read_excel("statePop.xlsx")
statePop
statePop <- read_excel("statePop.xlsx")
.as a data.frame()
statePop_df <- read_excel("statePop.xlsx")
statePop_df <- read_excel("statePop.xlsx")
statePop <- plot_usmap(data = statePop_df <- read_excel("statePop.xlsx")
)
View(df)
View(statePop_df)
statePop <- plot_usmap(data = statePop_df )
statePop_df <- read_excel("statePop.xlsx")
statePop <- plot_usmap(data = statePop_df )
View(statePop_df)
View(df)
statePop_df <- read_excel("statePop.xlsx")
statePop <- plot_usmap(data = statePop_df )
statePop
#Add the title
statePop + labs(title = "State Populations")
statePop + legend(title = "State Populations")
#Add some data to the map
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
#Change fill color scale
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(
low = "white", high = "red", name = "Population (2015)", label = scales::comma
) + theme(legend.position = "right")
statePop + scale_fill_continuous(
low = "white", high = "red", name = "Population (2015)", label = scales::comma
) + theme(legend.position = "right")
statePop + scale_fill_continuous(
low = "white", high = "red", name = "Population (YEAR)", label = scales::comma
) + theme(legend.position = "right")
statePop + scale_fill_continuous(
low = "white", high = "red", name = "Population (7/1/2013)", label = scales::comma
) + theme(legend.position = "right")
statePop + scale_fill_continuous(
low = "white", high = "green", name = "Population (7/1/2013)", label = scales::comma
) + theme(legend.position = "right")
pdf(file = "myMap.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
dev.off()
png("plot.png")
statePop
dev.off()
EL_county2223<- read_excel("2022-2023 Iowa Public School K-12 English Learners (EL) by District and Grade.xlsx")
setwd("~/Library/CloudStorage/Box-Box/Indicators Program/tableauServer/data_projects/DHR/School Data/for use in R")
EL_county2223<- read_excel("2022-2023 Iowa Public School K-12 English Learners (EL) by District and Grade.xlsx")
geoid <- read_excel("../GeoID and County name.xlsx")
EL_county2223 <- left_join(EL_county2223, geoid, by = "CountyName")
#Get the total EL learners by County and create a percent of student body
cEL <- EL_county2223 %>%
group_by(CountyName, GEOID) %>%
summarize(K12_EL_total = sum(K12_EL),
K12_total = sum(K12_Total_Enrollment),
district_count = n()) %>%
mutate(EL_percent = round(K12_EL_total / K12_total, 3)*100) %>%
as.data.frame()
hydrogenCounties <- read_excel("hydrogenRegionList.xlsx") %>%
group_by(Region, CountyName)
hydrogenCounties
# read the County sheet of the file, extract the columns as a vector, skip the meta data
myCols <- as.character(read_excel("EL_by_Language_2223.xlsx", "County", skip = 5, n_max = 1, col_names = FALSE))
# read in the rows below the headers by skipping 6 and then add the headers back from the myCols vector
langList <- read_excel("EL_by_Language_2223.xlsx", "County", skip = 6, col_names = myCols)
#join the geoid after using janitor to fix the County_name field
langList <- clean_names(langList, "big_camel")
langList <- full_join(langList, geoid, by = "CountyName")
langList <- select(langList, -NAME_CAPS, -County)
countyLangList_withRegion <-left_join(langList , hydrogenCounties, by = "CountyName")
countyTotalEnroll <- cEL %>% select("CountyName", "K12_total")
countyTotalEnroll <- countyTotalEnroll %>% filter(K12_total < 200000) #remove the state total
countyTotalEnrollwithRegion <-left_join(countyTotalEnroll , hydrogenCounties, by = "CountyName")
regionalTotalEnrollment <- countyTotalEnrollwithRegion %>%
group_by(Region) %>%
summarize(Region_K12_total = sum(K12_total))
## Get the total language enrollment for each county as a percent
CountyLangList_withRegion_CountyK12total <- left_join(countyLangList_withRegion, countyTotalEnroll, by = "CountyName")%>%
mutate(langPercent = round(Count / K12_total, 3)*100)
arrange(CountyLangList_withRegion_CountyK12total, Region, CountyName, Language)
## Get the total language enrollment for each region
regionalTotalList <-langListRegion %>%
group_by(Region, Language) %>%
summarize(language_count = sum(Count)
)
#write to CSV all the county languages
write_csv(CountyLangList_withRegion_CountyK12total,"County Languages 22-23 Summary.csv")
#filter() for only the counties in the regions and write to CSV
write_csv(filter(CountyLangList_withRegion_CountyK12total, Region > 0),"H2 County Languages 22-23 Summary.csv")
### Next summarize it by Region
#Get the total EL learners by County and create a percent of student body
regionalLangListSummary <- left_join(CountyLangList_withRegion_CountyK12total, regionalTotalEnrollment, by = "Region") %>%
group_by(Language, Region, Region_K12_total) %>%
summarize(Region_count = sum(Count))  %>%
mutate(EL_percent = round(Region_count / Region_K12_total, 4)*100) %>%
arrange(Region, desc(EL_percent))
write_csv(regionalLangListSummary,"regionalLangListSummary.csv")
## Get the total language enrollment for each county as a percent
CountyLangList_withRegion_CountyK12total <- left_join(countyLangList_withRegion, countyTotalEnroll, by = "CountyName")%>%
mutate(langPercent = round(Count / K12_total, 4)*100)
arrange(CountyLangList_withRegion_CountyK12total, Region, CountyName, Language)
## Get the total language enrollment for each region
regionalTotalList <-langListRegion %>%
group_by(Region, Language) %>%
summarize(language_count = sum(Count)
)
#write to CSV all the county languages
write_csv(CountyLangList_withRegion_CountyK12total,"County Languages 22-23 Summary.csv")
#filter() for only the counties in the regions and write to CSV
write_csv(filter(CountyLangList_withRegion_CountyK12total, Region > 0),"H2 County Languages 22-23 Summary.csv")
### Next summarize it by Region
#Get the total EL learners by County and create a percent of student body
regionalLangListSummary <- left_join(CountyLangList_withRegion_CountyK12total, regionalTotalEnrollment, by = "Region") %>%
group_by(Language, Region, Region_K12_total) %>%
summarize(Region_count = sum(Count))  %>%
mutate(EL_percent = round(Region_count / Region_K12_total, 4)*100) %>%
arrange(Region, desc(EL_percent))
write_csv(regionalLangListSummary,"regionalLangListSummary.csv")
langList = c(
"Speak only English" = "C16001_002",
"Spanish" = "C16001_003",
"French, Haitian, or Cajun" = "C16001_006",
"German or other West Germanic languages" = "C16001_009",
"Russian, Polish, or other Slavic languages" = "C16001_012",
"Other Indo-European languages" = "C16001_015",
"Korean" = "C16001_018",
"Chinese (incl. Mandarin, Cantonese)" = "C16001_021",
"Vietnamese" = "C16001_024",
"Tagalog (incl. Filipino)" = "C16001_027",
"Other Asian and Pacific Island languages" = "C16001_030",
"Arabic" = "C16001_033",
"Other and unspecified languages" = "C16001_036"
)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = "Boone",
variables = langList,
year = 2021
)
View(ACS_countyLanguages)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = "Boone",
variables = "C16001_003P",
year = 2021
)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_00",
year = 2021
)
countyList = c("Boone" = 19197, "Wright" =  19015
)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_00",
year = 2021
)
countyList = c("Boone" = 19197, "Wright" =  19015
)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_003p",
year = 2021
)
countyList = c("Boone" = 19197, "Wright" =  19015
)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_003PE",
year = 2021
)
countyList = c("Boone" = 19197, "Wright" =  19015
)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_003",
year = 2021
)
countyList = c("Boone", "Wright")
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_003",
year = 2021
)
## ----install-packages---------------------------------------------
install.packages(c("tidycensus", "tidyverse", "sF))
library(tidycensus)
library(tidyverse)
library(sf)
census_api_key('paste your key here', overwrite=TRUE)
install.packages(c("usmap", "usmapdata", "ggplot2"))
df <- data.frame(
state = c("AL", "Alaska", "AR", "AZ"),
values = c(14, 18, 19, 8)
)
View(df)
plot_usmap(data = df)
df <- data.frame(
state = c("AL", "Alaska", "AR", "AZ", "ND"),
values = c(14, 18, 19, 8, 17)
)
#now just plot the data contained in df
plot_usmap(data = df)
df <- data.frame(
state = c("ND", "IA", "MN", "AL", "Alaska", "AR", "NC"),
values = c(10, 10, 5, 1, 1, 1, 1)
)
plot_usmap(data = df)
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "right")
#display the plot
myMap
myMap <- plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 40))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "right")
#display the plot
myMap
myMap <- plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "right")
#display the plot
myMap
myMap <- plot_usmap(data = df) +
labs(title = "States Visited",
subtitle = str_wrap("I actually have visited more states than this, but
this will work for this exercise. Notice that I am wrapping this subtitle
text so it fits on multiple lines if it exceeds 80 characters. Do be
careful as it is eazy to hav typo erarors!", 80))  +
theme(panel.background = element_rect(color = "black", fill = "white"), legend.position = "left")
#display the plot
myMap
myMap + labs(title = "Some of the States I have Visited")
#display the plot with the new title
myMap
myMap + labs(title = "Some of the States I have Visited")
#display the plot with the new title
myMap
install.packages("readxls")
library("readxl")
setwd("~/Library/CloudStorage/Box-Box/GitHub_Repos/LA558_2023/LA558_2023/lecture/5ab")
statePop_df <- read_excel("statePop.xlsx")
View(statePop_df)
statePop <- plot_usmap(data = statePop_df )
#create a plot
statePop
#Add the title
statePop + labs(title = "State Populations")
statePop + scale_fill_continuous(
low = "white", high = "green", name = "Population (7/1/2013)", label = scales::comma
) + theme(legend.position = "right")
png("plot.png")
statePop
dev.off()
statePop + scale_fill_continuous(
low = "white", high = "green", name = "Population (7/1/2013)", label = scales::comma
) + theme(legend.position = "right")
#finally, you need to export the map. You can do this manually from the
#plots pane or with htis code
#See this reference for details on customization of the export.
#My code will export a 480x480 graphic file.
# http://www.cookbook-r.com/Graphs/Output_to_a_file/
png("plot.png")
statePop
dev.off()
iowa_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "IA",
year = 2021,
geometry = TRUE
)
plot(iowa_income["estimate"])
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = "C16001_003",
year = 2021
)
View(ACS_countyLanguages)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = langList,
year = 2021
)
View(ACS_countyLanguages)
countyList = c("Boone", "Wright", "Story")
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = langList,
year = 2021
)
vars <- load_variables(2021, "acs5")
View(vars)
ACS_countyLanguages <- get_acs(
geography = "county",
state = "IA",
county = countyList,
variables = langList,
summary_var = "C16001_001",
year = 2021
)
reticulate::repl_python()
library("readxl")
setwd("~/Desktop/Github/LA558_Samuel_Odoom/Exercises/Exercise 6")
FlCountyPop_df <- read_excel("FloridaPop.xlsx")
View(FlCountyPop_df)
FlCountyPop_df <- read_excel("FloridaPop.xlsx")
View(FlCountyPop_df)
install.packages("usmap")
install.packages("usmapdata")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("tidycensus")
install.packages("tigris")
library(tidycensus)
library("tidycensus")
library("tidycensus")
install.packages("tidycensus")
library("tidycensus")
install.packages("tidycensus")
